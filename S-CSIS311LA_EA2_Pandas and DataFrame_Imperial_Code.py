# -*- coding: utf-8 -*-
"""S-CSIS311LA_EA2_Pandas and DataFrame_Imperial_Code.ipynb

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1r5MSNd9DAI2_--D6djmpK4APC7_FNFCh

# Pandas and DataFrame
**An Enabling Assessment by Luis Anton P. Imperial (BCS32)**,  
for S-CSIS311LA (Introduction to Machine Learning)
at De La Salle University – Dasmariñas.
"""

import numpy as np
from pandas import Series, DataFrame
import pandas as pd

df = pd.read_csv("/content/drive/MyDrive/Documents/Academic Documents/BCS3 CSIS311LA/S-CSIS311LA_EA2_Pandas and DataFrame_Imperial_Dataset.csv", thousands=",")

pd.set_option('display.max_rows', None)
pd.set_option('display.max_columns', None)
df

"""We initialized the necessary components of our program, and imported the provided dataset as given in the example.

The table shown lists all barangays (local government sub-units) of the City of Dasmariñas, in Cavite province, the Philippines, as well as their population over the past four censuses (2000, 2010, 2015, 2020). The final row lists the overall population statistics for the city as a whole.

## Conversion of Statistics to Numerical Values

By default, Pandas imports a dataset as a series of strings.

We have to convert these to numeric values first, in order to manipulate them and filter them for our purposes.
"""

df["Population\nCensus\n2000-05-01"] = pd.to_numeric(df["Population\nCensus\n2020-05-01"])
df["Population\nCensus\n2010-05-01"] = pd.to_numeric(df["Population\nCensus\n2010-05-01"])
df["Population\nCensus\n2015-08-01"] = pd.to_numeric(df["Population\nCensus\n2015-08-01"])
df["Population\nCensus\n2020-05-01"] = pd.to_numeric(df["Population\nCensus\n2020-05-01"])

"""## Display of Barangay Statistics based on Population

Now that we have the statistics converted and ready for use, let's filter them to show two different kinds of barangays:

- those with greater than 10,000 population (`populous_brgys`), and
- those with less than 10,000 population (`sparse_brgys`).

### Heavily-Populated Barangays in Dasmariñas
"""

populous_brgys = df[(df["Population\nCensus\n2020-05-01"] > 10000) & (df["Status"] == "Barangay")]
populous_brgys

"""### Less Populous Barangays"""

sparse_brgys = df[(df["Population\nCensus\n2020-05-01"] < 10000) & (df["Status"] == "Barangay")]
sparse_brgys

"""## Creation of New Statistics

One of the amazing things with NumPy and Pandas is their combined ability to create new data for usage in different scientific and mathematical applications.

We will aim to generate a new column in the DataFrame we have created that purports to show the number of people in each barangay that has been infected with the COVID-19 disease.
"""

df["COVID Confirmed Cases"] = np.random.randint(100, 1000, size=len(df))
df["COVID Recoveries"] = np.random.randint(1, 100, size=len(df))
df["COVID Deaths"] = np.random.randint(10, 100, size=len(df))
df

"""## Conversion to Graphs

Have you ever been to communities like r/DataIsBeautiful, and marveled at the beauty of graphs, charts, and other kinds of statistics that are so easy to view at a glance?

Numbers are boring to see, at least by themselves. This is the reason why popularly visited forums and discussion groups regarding data always emphasize the visualization aspect of this study.

Our professor, Mr. Rolando B. Barrameda, recommends the popular visualization tool Matplotlib to convert the given data into different types of graphs.

Let's import the package and see what we can do with it!
"""

import matplotlib.pyplot as plt

"""### Scatter Plot

This graph could display whether there is a correlation between the two factors displayed — population, and number of COVID-19 cases.

A series of dots appearing to form a line would represent such correlation; since there isn't one, however, our dataset would show otherwise.

*(Disclaimer: Note that all COVID-related statistics on this notebook were randomly generated earlier by the NumPy package.)*
"""

fig, ax = plt.subplots()
ax.scatter(df["Population\nCensus\n2020-05-01"][df["Status"] == "Barangay"], df["COVID Confirmed Cases"][df["Status"] == "Barangay"])
ax.set_xlabel("Population")
ax.set_ylabel("COVID Confirmed Cases")

"""### Line Graph"""

fig, ax = plt.subplots(figsize=(10, 6))  # Adjust figure size if needed

for index, row in df[df["Status"] == "Barangay"].iterrows():
    population = [
        row["Population\nCensus\n2000-05-01"],
        row["Population\nCensus\n2010-05-01"],
        row["Population\nCensus\n2015-08-01"],
        row["Population\nCensus\n2020-05-01"],
    ]
    ax.plot(years, population)

ax.set_xlabel("Year")
ax.set_ylabel("Population")
ax.set_yscale("log")  # Set y-axis to logarithmic scale
ax.set_title("Population Growth of Barangays in Dasmariñas City (2000-2020)")
ax.legend(loc="upper left", ncol=4, fontsize="small")  # Adjust legend location and size as needed
plt.show()

"""#### Line Graph with Legend

Admittedly, this will look unreadable because the list of barangays graphed would be too big.
"""

fig, ax = plt.subplots(figsize=(10, 6))  # Adjust figure size if needed

for index, row in df[df["Status"] == "Barangay"].iterrows():
    population = [
        row["Population\nCensus\n2000-05-01"],
        row["Population\nCensus\n2010-05-01"],
        row["Population\nCensus\n2015-08-01"],
        row["Population\nCensus\n2020-05-01"],
    ]
    ax.plot(years, population, label=row["Name"])

ax.set_xlabel("Year")
ax.set_ylabel("Population")
ax.set_yscale("log")  # Set y-axis to logarithmic scale
ax.set_title("Population Growth of Barangays in Dasmariñas City (2000-2020)")
ax.legend(loc="upper left", ncol=4, fontsize="small")  # Adjust legend location and size as needed
plt.show()

"""### Bar Graph

This time, we'll simply get the top ten barangays on our list, so as to not overclutter the graph.
"""

top_ten_barangays = df[df["Status"] == "Barangay"].nlargest(10, "Population\nCensus\n2020-05-01")

plt.figure(figsize=(12, 6))
plt.bar(top_ten_barangays["Name"], top_ten_barangays["Population\nCensus\n2020-05-01"])
plt.xlabel("Barangay")
plt.ylabel("Population (2020 Census)")
plt.title("Top 10 Barangays in Dasmariñas City by Population (2020 Census)")
plt.xticks(rotation=45, ha="right")
plt.tight_layout()
plt.show()

"""### Pie Chart

This shows how many COVID-19 deaths have been in the City of Dasmariñas, with each slice representing a barangay.

*(Disclaimer: Note that all COVID-related statistics on this notebook were randomly generated earlier by the NumPy package.)*
"""

plt.pie(df["COVID Deaths"], labels=df["Name"], autopct="%1.1f%%")
plt.title("COVID-19 Deaths in Dasmariñas City")
plt.show()

"""### Histogram

This type of chart purports to show the distribution of frequency in a certain type of statistics.

The example shown below represents how many times a barangay has received a certain range of COVID-19 cases. For instance, the 1,000 bar has a y-axis of 10, so that means there are ten barangays with up to 1,000 COVID-19 cases.

*(Disclaimer: Note that all COVID-related statistics on this notebook were randomly generated earlier by the NumPy package.)*
"""

plt.hist(df["COVID Confirmed Cases"], bins=10)
plt.xlabel("COVID Confirmed Cases")
plt.ylabel("Frequency")
plt.title("Distribution of COVID Confirmed Cases in Dasmariñas City")
plt.show()

"""## Conclusion

Our second enabling assessment in Introduction to Machine Learning (with subject codes S-CSIS311 for the lecture schedule and S-CSIS311LA for the laboratory schedule) has taken us on a journey towards the importation and visualization of relevant datasets for future use.

We have learned the basics of different Python packages used by data scientists and analysts, such as numpy and pandas. Furthermore, we have inculcated in ourselves the importance of presenting our data in a manner that can be easily read and understood by various groups of people.

## Appendix

### Assessment Instructions

Link : Barangay Census

https://www.citypopulation.de/en/philippines/dasmarinas/

- Pandas Working with Excel Data
- Convert the Link data to excel files
> - Grab the Barangay list of populations greater than 10,000
> - Grab the Barangay list of populations less than 10,000
- Build a sample of statistical data in Cavite to track covid cases
> - Tabular Data Confirmed Cases, recoveries, deaths
- Convert to a Graph using Matplotlib
> - Scatter plot
> - Line Graph
> - Bar Graph
> - Pie Chart
> - Histogram

### Assessment Details

- Type: Dropbox
- Max score: 100
- Category: Enabling Asssessment
- Start: Sep 4, 1:00 pm
- Due: Sep 7

- Max. attempts: 3
- Allow late submissions: ❌
"""